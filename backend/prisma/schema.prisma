generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
    id             String         @id @default(uuid())
    name           String         @db.VarChar(255)
    phoneNumber    String         @unique @db.VarChar(20)
    dateOfBirth    DateTime
    email          String         @unique
    password       String
    sentEmails     Email[]        @relation("SentEmails")
    receivedEmails Recipient[]
    ccEmails       CCRecipient[]
    bccEmails      BCCRecipient[]
}

model Email {
    id                       String         @id @default(uuid())
    subject                  String         @db.VarChar(255)
    body                     String         @db.Text
    sender                   User           @relation("SentEmails", fields: [senderId], references: [id])
    senderId                 String
    recipients               Recipient[]
    cc                       CCRecipient[]
    bcc                      BCCRecipient[]
    attachments              Attachment[]
    createdAt                DateTime       @default(now())
    updatedAt                DateTime       @updatedAt
    threadId                 String? //optional, for replies/thread view
    isDraft                  Boolean        @default(false)
    isDraftDeleted           Boolean        @default(false)
    isSentDeleted            Boolean        @default(false)
    isSentPermanentlyDeleted Boolean        @default(false)
}

model Attachment {
    id       String  @id @default(uuid())
    filename String
    url      String
    publicId String
    email    Email   @relation(fields: [emailId], references: [id], onDelete: Cascade)
    emailId  String
    isDraft  Boolean @default(false)
}

model Recipient {
    id        String   @id @default(uuid())
    email     Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)
    emailId   String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    read      Boolean  @default(false)
    isDeleted Boolean  @default(false)
    updatedAt DateTime @updatedAt
    isDraft   Boolean  @default(false)
}

model CCRecipient {
    id        String   @id @default(uuid())
    email     Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)
    emailId   String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    read      Boolean  @default(false)
    isDeleted Boolean  @default(false)
    updatedAt DateTime @updatedAt
    isDraft   Boolean  @default(false)
}

model BCCRecipient {
    id        String   @id @default(uuid())
    email     Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)
    emailId   String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    read      Boolean  @default(false)
    isDeleted Boolean  @default(false)
    updatedAt DateTime @updatedAt
    isDraft   Boolean  @default(false)
}
